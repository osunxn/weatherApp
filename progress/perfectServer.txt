const express = require('express');
const cors = require('cors');
const fs = require('fs');
const axios = require('axios');
const bodyParser = require('body-parser');
const path = require('path');

// Create server application (port 3000)
const serverApp = express();
const serverPort = 3000;

// Middleware to parse JSON bodies
serverApp.use(bodyParser.json());

// Enable CORS
serverApp.use(cors());

// Function to save JSON data to a file
function saveJsonToFile(filename, data) {
    fs.writeFile(path.join(__dirname, filename), JSON.stringify(data, null, 2), err => {
        if (err) {
            console.error('Error saving JSON file:', err);
        } else {
            console.log(`JSON data saved to ${filename}`);
        }
    });
}

// Function to log errors to a file
function logErrorToFile(error) {
    const errorLog = `${new Date().toISOString()} - ${error.stack || error}\n\n`;
    fs.appendFile(path.join(__dirname, 'error.log'), errorLog, err => {
        if (err) {
            console.error('Error logging to file:', err);
        }
    });
}

// Create Express applications for each function
const weatherApp = express();
const userLocationApp = express();
const readJsonFileApp = express();
const cesiumApp = express();
const getActualKeyApp = express();

// Weather endpoint
weatherApp.get('/', (req, res) => {
    console.log('Weather endpoint hit');
    const city = req.query.city;
    const apiKey = '9d25421f1b894a7abb8225858240204'; // Your weather API key
    const apiUrl = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=1&aqi=no&alerts=no`;

    axios.get(apiUrl)
        .then(response => {
            const data = response.data;
            saveJsonToFile('weather.json', data); // Save weather data to weather.json
            res.json(data);
        })
        .catch(error => {
            res.status(500).json({ error: 'Error fetching weather data' });
            logErrorToFile(error);
        });
});

// User location endpoint
userLocationApp.get('/', (req, res) => {
    console.log('User location endpoint hit');
    const apiKey = '0a592ebb2449d59c84ef89c06b60ecdc122d2aa12a2777aff6393503';
    const apiUrl = `https://api.ipdata.co?api-key=${apiKey}`;

    axios.get(apiUrl)
        .then(response => {
            const data = response.data;
            saveJsonToFile('location.json', data); // Save location data to location.json
            res.json(data);
        })
        .catch(error => {
            res.status(500).json({ error: 'Error fetching user location' });
            logErrorToFile(error);
        });
});

// Read JSON file endpoint (changed to accept GET requests)
readJsonFileApp.get('/', (req, res) => {
    console.log('\nRead JSON file endpoint hit');
    try {
        const { filename, content } = req.query; // Use req.query to get parameters from query string

        // Construct file path
        const filePath = path.join(__dirname, `${filename}.json`);

        // Read JSON file synchronously
        const jsonData = fs.readFileSync(filePath);

        // Parse JSON data
        const parsedData = JSON.parse(jsonData);

        // Extract requested content
        let result = parsedData;
        for (const key of content) {
            if (result.hasOwnProperty(key)) {
                result = result[key];
            } else {
                return res.status(404).send('Requested content not found');
            }
        }

        // Check if the result is an object, if so, return the value of the last property
        if (typeof result === 'object') {
            const keys = Object.keys(result);
            const lastKey = keys[keys.length - 1];
            result = result[lastKey];
        }

        return res.send(result);
    } catch (error) {
        logErrorToFile(error);
        return res.status(500).send('Error reading JSON file');
    }
});

function interceptConsoleLog(actualCesiumApiKey, protectedKey) {
    // Override console.log temporarily
    const originalLog = console.log;
    console.log = function(...args) {
        for (const arg of args) {
            if (typeof arg === 'string' && arg.includes(actualCesiumApiKey)) {
                originalLog('Cesium API Key:', protectedKey);
                return;
            }
        }
        originalLog.apply(console, args);
    };
}

// Endpoint to send the function string to the client
cesiumApp.get('/', (req, res) => {
    const serverUrl = 'http://localhost:3000';
// Modified functionString to include the new logic
const functionString = `
    function interceptConsoleLog(actualCesiumApiKey, protectedKey) {
        // Override console.log temporarily
        const originalLog = console.log;
        console.log = function(...args) {
            for (const arg of args) {
                if (typeof arg === 'string' && arg.includes(actualCesiumApiKey)) {
                    originalLog('Cesium API Key:', protectedKey);
                    return;
                }
            }
            originalLog.apply(console, args);
        };
    }

    async function setCesiumApiKey() {
        try {
            // Fetch the actual API key from the server using axios
            const response = await axios.get(\`${serverUrl}/getActualApiKey\`);
            const actualCesiumApiKey = response.data.apiKey;
            // Set the actual API key as a global variable
            interceptConsoleLog(actualCesiumApiKey, '### PROTECTED API KEY ###');
            return actualCesiumApiKey; // Return the actual API key
        } catch (error) {
            console.error('Error fetching API key:', error);
        }
    }

    // Execute the function to set the Cesium API key and return the API key
    return setCesiumApiKey();
`;

    console.log(functionString);
    
    // Send the function string to the client
    res.status(200).send(functionString);
});

// Endpoint to send the actual API key to the client
getActualKeyApp.get('/', (req, res) => {
    console.log('Get actual API key endpoint hit');
    const cesiumApiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwNGUyZWY1ZS03MzMxLTRkNGMtYjZjMC1lOWE1ZDM5MTBlOTIiLCJpZCI6MjA2NzY3LCJpYXQiOjE3MTIzMDkwMDZ9.JU-rRUMNfeztJ-UUQZEoZ2lMzXC_jhCqs77bEGCXsAk';
    interceptConsoleLog(actualCesiumApiKey, '### PROTECTED API KEY ###');
    res.status(200).json({ apiKey: cesiumApiKey });
});


// Additional route to handle root path ("/")
serverApp.get('/', (req, res) => {
    const requestData = {
        method: req.method + '\n',
        url: req.url + '\n',
        headers: req.headers,
        query: req.query,
        params: req.params,
        body: req.body // Only available for POST, PUT, and PATCH requests
    };

    // Convert the requestData object to a JSON string with two spaces indentation
    const responseData = JSON.stringify({ message: 'Server is running on port 3000', requestData }, null, 2);

    // Send the response
    res.set('Content-Type', 'application/json').send(responseData + '\n');
});

// Mount the Express applications at different paths
serverApp.use('/weather', weatherApp);
serverApp.use('/userlocation', userLocationApp);
serverApp.use('/readJsonFile', readJsonFileApp);
serverApp.use('/cesiumMap', cesiumApp);
serverApp.use('/getActualApiKey', getActualKeyApp);

// Start the server application
serverApp.listen(serverPort, () => {
    console.log(`Server is running on http://localhost:${serverPort}`);
});



const app = express();
const port = 5500;

// Serve HTML files from the public/html directory
app.use(express.static(path.join(__dirname, '..', 'public', '..', 'html')));

// Serve CSS files from the public/styling directory
app.use('/css', express.static(path.join(__dirname, '..', 'public', '..', 'styling')));

// Serve JavaScript files from the public/javascript directory
app.use('/js', express.static(path.join(__dirname, '..', 'public', '..', 'javascript')));

// Serve image files from the public/assets directory
app.use('/assets', express.static(path.join(__dirname, '..', 'public', '..', 'assets')));

// Handle root path ("/")
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'public', 'html', 'index.html'));
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});






------------------------------------------------------- ------------------------------------------------------------------
const express = require('express');
const cors = require('cors');
const fs = require('fs');
const axios = require('axios');
const bodyParser = require('body-parser');
const path = require('path');

// Create server application (port 3000)
const serverApp = express();
const serverPort = 5000;

// Middleware to parse JSON bodies
serverApp.use(bodyParser.json());

// Enable CORS
serverApp.use(cors());

// Function to save JSON data to a file
function saveJsonToFile(filename, data) {
    fs.writeFile(path.join(__dirname, filename), JSON.stringify(data, null, 2), err => {
        if (err) {
            console.error('Error saving JSON file:', err);
        } else {
            console.log(`JSON data saved to ${filename}`);
        }
    });
}

// Function to log errors to a file
function logErrorToFile(error) {
    const errorLog = `${new Date().toISOString()} - ${error.stack || error}\n\n`;
    fs.appendFile(path.join(__dirname, 'error.log'), errorLog, err => {
        if (err) {
            console.error('Error logging to file:', err);
        }
    });
}

// Create Express applications for each function
const weatherApp = express();
const userLocationApp = express();
const readJsonFileApp = express();
const cesiumApp = express();
const getActualKeyApp = express();

// Weather endpoint
weatherApp.get('/', (req, res) => {
    console.log('Weather endpoint hit');
    const city = req.query.city;
    const apiKey = '9d25421f1b894a7abb8225858240204'; // Your weather API key
    const apiUrl = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=1&aqi=no&alerts=no`;

    axios.get(apiUrl)
        .then(response => {
            const data = response.data;
            saveJsonToFile('weather.json', data); // Save weather data to weather.json
            res.json(data);
        })
        .catch(error => {
            res.status(500).json({ error: 'Error fetching weather data' });
            logErrorToFile(error);
        });
});

// User location endpoint
userLocationApp.get('/', (req, res) => {
    console.log('User location endpoint hit');
    const apiKey = '0a592ebb2449d59c84ef89c06b60ecdc122d2aa12a2777aff6393503';
    const apiUrl = `https://api.ipdata.co?api-key=${apiKey}`;

    axios.get(apiUrl)
        .then(response => {
            const data = response.data;
            saveJsonToFile('location.json', data); // Save location data to location.json
            res.json(data);
        })
        .catch(error => {
            res.status(500).json({ error: 'Error fetching user location' });
            logErrorToFile(error);
        });
});

// Read JSON file endpoint (changed to accept GET requests)
readJsonFileApp.get('/', (req, res) => {
    console.log('\nRead JSON file endpoint hit');
    try {
        const { filename, content } = req.query; // Use req.query to get parameters from query string

        // Construct file path
        const filePath = path.join(__dirname, `${filename}.json`);

        // Read JSON file synchronously
        const jsonData = fs.readFileSync(filePath);

        // Parse JSON data
        const parsedData = JSON.parse(jsonData);

        // Extract requested content
        let result = parsedData;
        for (const key of content) {
            if (result.hasOwnProperty(key)) {
                result = result[key];
            } else {
                return res.status(404).send('Requested content not found');
            }
        }

        // Check if the result is an object, if so, return the value of the last property
        if (typeof result === 'object') {
            const keys = Object.keys(result);
            const lastKey = keys[keys.length - 1];
            result = result[lastKey];
        }

        return res.send(result);
    } catch (error) {
        logErrorToFile(error);
        return res.status(500).send('Error reading JSON file');
    }
});

// Initialize a flag to track whether initializeCondition has been sent to the client
let initializeConditionSent = false;

cesiumApp.get('/', (req, res) => {
    const serverUrl = 'http://localhost:3000';

    // Define the function to intercept console.log
    const sendInitializeCondition = `
    // Function to retrieve the function string and prevent logging of its content
    function interceptFunctionStringLog(TheString, protectedKey) {
        // console.log(TheString);
        // Override console.log temporarily to prevent logging functionString and promise
        const originalLog = console.log;
        console.log = function(...args) {
            for (const arg of args) {
                if (typeof arg === 'string' && (arg.includes(TheString) || arg instanceof Promise)) {
                    originalLog('PROTECTED FUNCTION STRING OR PROMISE:', protectedKey);
                    return;
                }
            }
            originalLog.apply(console, args);
        };
    }
              
        async function secondCall() {
            try {
                // Fetch the function string from the server using axios
                const response = await axios.get(\`${serverUrl}/cesiumMap\`);
                const functionString = response.data;
                // Prevent logging of functionString
                interceptFunctionStringLog(functionString, '### PROTECTED FUNCTION STRING ###');
                return functionString;
            } catch (error) {
                console.error('Error fetching function string:', error);
            }
        }
        
        // Execute the function to fetch functionString
        return secondCall();
    `;

    // Modified functionString to include the new logic
    const functionString = `
        function interceptConsoleLog(actualCesiumApiKey, protectedKey, promiseInterceptor) {
            // Override console.log temporarily
            const originalLog = console.log;
            console.log = function(...args) {
                for (const arg of args) {
                    if (typeof arg === 'string' && (arg.includes(actualCesiumApiKey) || arg.includes(promiseInterceptor))) {
                        originalLog('Cesium API Key:', protectedKey);
                        return;
                    }
                }
                originalLog.apply(console, args);
            };
        }
        
        async function setCesiumApiKey() {
            try {
                // Fetch the actual API key from the server using axios
                const response = await axios.get(\`${serverUrl}/getActualApiKey\`);
                const actualCesiumApiKey = response.data.apiKey;
                // Set the actual API key as a global variable
                interceptConsoleLog(actualCesiumApiKey, '### PROTECTED API KEY ###', '');
                return actualCesiumApiKey; // Return the actual API key
            } catch (error) {
                console.error('Error fetching API key:', error);
            }
        }
        
        // Execute the function to set the Cesium API key and return the API key
        return setCesiumApiKey();
    `;

    // Combine initializeCondition and functionString
    let fullScript;

    if (!initializeConditionSent) {
        fullScript = sendInitializeCondition;
        initializeConditionSent = true;
    } else {
        fullScript = functionString;
        initializeConditionSent = false;
    }

    // Send the combined script with the promise interceptor to the client
    res.status(200).send(fullScript);
});



// Endpoint to send the actual API key to the client
getActualKeyApp.get('/', (req, res) => {
    console.log('Get actual API key endpoint hit');
    const cesiumApiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwNGUyZWY1ZS03MzMxLTRkNGMtYjZjMC1lOWE1ZDM5MTBlOTIiLCJpZCI6MjA2NzY3LCJpYXQiOjE3MTIzMDkwMDZ9.JU-rRUMNfeztJ-UUQZEoZ2lMzXC_jhCqs77bEGCXsAk';
    res.status(200).json({ apiKey: cesiumApiKey });
});


// Additional route to handle root path ("/")
serverApp.get('/', (req, res) => {
    const requestData = {
        method: req.method + '\n',
        url: req.url + '\n',
        headers: req.headers,
        query: req.query,
        params: req.params,
        body: req.body // Only available for POST, PUT, and PATCH requests
    };

    // Convert the requestData object to a JSON string with two spaces indentation
    const responseData = JSON.stringify({ message: 'Server is running on port 3000', requestData }, null, 2);

    // Send the response
    res.set('Content-Type', 'application/json').send(responseData + '\n');
});

// Mount the Express applications at different paths
serverApp.use('/weather', weatherApp);
serverApp.use('/userlocation', userLocationApp);
serverApp.use('/readJsonFile', readJsonFileApp);
serverApp.use('/cesiumMap', cesiumApp);
serverApp.use('/getActualApiKey', getActualKeyApp);

// Start the server application
serverApp.listen(serverPort, () => {
    console.log(`Server is running on http://localhost:${serverPort}`);
});



const app = express();
const port = 3000;

// Serve HTML files from the public/html directory
app.use(express.static(path.join(__dirname, '..', 'public', '..', 'html')));

// Serve CSS files from the public/styling directory
app.use('/css', express.static(path.join(__dirname, '..', 'public', '..', 'styling')));

// Serve JavaScript files from the public/javascript directory
app.use('/js', express.static(path.join(__dirname, '..', 'public', '..', 'javascript')));

// Serve image files from the public/assets directory
app.use('/assets', express.static(path.join(__dirname, '..', 'public', '..', 'assets')));

// Handle root path ("/")
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'public', 'html', 'index.html'));
});

// Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});






    console.log('User location endpoint hit');
    // const apiKey = '0a592ebb2449d59c84ef89c06b60ecdc122d2aa12a2777aff6393503';
    // const apiUrl = `https://api.ipdata.co?api-key=${apiKey}`;
    const apiUrl = 'https://ipapi.co/json/';



// Initialize a flag to track the state (first or second call)
let state = 'first';

cesiumApp.get('/', (req, res) => {
    const serverUrl = 'http://localhost:5000';

    // Define the function to intercept console.log
    const sendInitializeCondition = `
    // Define the interceptor function
    function interceptLogging(valueOrFunction, protectedMessage, executeFunction = true) {
        // Store the original console.log function
        const originalConsoleLog = console.log;
    
        // Function to evaluate a string as executable code
        function evaluateStringIfExecutable(str) {
            try {
                const func = new Function(str); // Create a new function from the string
                return func(); // Execute the function
            } catch (e) {
                return str; // If it's not executable, return the original string
            }
        }
    
        // Function to check if a value is protected
        function isProtected(value) {
            return new Promise((resolve) => {
                // Function to check if a value matches the protected value or function
                const checkValue = (val) => {
                    if (typeof val === 'string' || val instanceof String) {
                        // Evaluate the string if executeFunction is true
                        const evaluatedValue = executeFunction ? evaluateStringIfExecutable(val) : val;
                        // Check if the string contains or matches the protected value or function
                        return val.includes(valueOrFunction) || (evaluatedValue !== val && evaluatedValue === valueOrFunction);
                    } else if (typeof val === 'function' && val.toString() === valueOrFunction.toString()) {
                        return true; // Check if the function matches the protected function
                    }
                    return false;
                };
    
                // Handle the case where the protected value is a function
                if (typeof valueOrFunction === 'function') {
                    const result = valueOrFunction(); // Execute the function
                    if (result instanceof Promise) {
                        // If the result is a promise, handle it asynchronously
                        result.then(res => resolve(res === value || checkValue(res))).catch(() => resolve(false));
                    } else {
                        resolve(result === value || checkValue(result)); // Check the result of the function
                    }
                } else {
                    // Evaluate the protected value if it's a string and executeFunction is true
                    const evaluatedValue = executeFunction ? evaluateStringIfExecutable(valueOrFunction) : valueOrFunction;
                    // Resolve if the value matches or contains the protected value
                    resolve(valueOrFunction === value || checkValue(value) || evaluatedValue === value);
                }
            });
        }
    
        // Function to intercept and check each argument
        function checkAndIntercept(arg) {
            if (arg instanceof Promise) {
                return arg.then(res => {
                    return isProtected(res).then(isProt => isProt ? protectedMessage : res);
                }).catch(err => {
                    originalConsoleLog(err); // Log any errors in the promise
                    return arg;
                });
            }
            return isProtected(arg).then(isProt => isProt ? protectedMessage : arg); // Check if the argument is protected
        }
    
        // Override the console.log function
        console.log = function(...args) {
            // Check and intercept all arguments
            Promise.all(args.map(checkAndIntercept)).then(modifiedArgs => {
                originalConsoleLog.apply(console, modifiedArgs); // Log the modified arguments
            });
        };
    }
    
        
        async function secondCall() {
            try {
                // Fetch the function string from the server using axios
                const response = await axios.get(\`${serverUrl}/cesiumMap\`);
                const functionString = response.data;
                // Prevent logging of functionString and promises
                interceptLogging(functionString, '### PROTECTED FUNCTION STRING ###');
                return functionString;
            } catch (error) {
                console.error('Error fetching function string:', error);
            }
        }
        
        return secondCall();
    `;

    // Modified functionString to include the new logic
    const functionString = `
    // Define the interceptor function
    function interceptLogging(valueOrFunction, protectedMessage, executeFunction = true) {
        // Store the original console.log function
        const originalConsoleLog = console.log;
    
        // Function to evaluate a string as executable code
        function evaluateStringIfExecutable(str) {
            try {
                const func = new Function(str); // Create a new function from the string
                return func(); // Execute the function
            } catch (e) {
                return str; // If it's not executable, return the original string
            }
        }
    
        // Function to check if a value is protected
        function isProtected(value) {
            return new Promise((resolve) => {
                // Function to check if a value matches the protected value or function
                const checkValue = (val) => {
                    if (typeof val === 'string' || val instanceof String) {
                        // Evaluate the string if executeFunction is true
                        const evaluatedValue = executeFunction ? evaluateStringIfExecutable(val) : val;
                        // Check if the string contains or matches the protected value or function
                        return val.includes(valueOrFunction) || (evaluatedValue !== val && evaluatedValue === valueOrFunction);
                    } else if (typeof val === 'function' && val.toString() === valueOrFunction.toString()) {
                        return true; // Check if the function matches the protected function
                    }
                    return false;
                };
    
                // Handle the case where the protected value is a function
                if (typeof valueOrFunction === 'function') {
                    const result = valueOrFunction(); // Execute the function
                    if (result instanceof Promise) {
                        // If the result is a promise, handle it asynchronously
                        result.then(res => resolve(res === value || checkValue(res))).catch(() => resolve(false));
                    } else {
                        resolve(result === value || checkValue(result)); // Check the result of the function
                    }
                } else {
                    // Evaluate the protected value if it's a string and executeFunction is true
                    const evaluatedValue = executeFunction ? evaluateStringIfExecutable(valueOrFunction) : valueOrFunction;
                    // Resolve if the value matches or contains the protected value
                    resolve(valueOrFunction === value || checkValue(value) || evaluatedValue === value);
                }
            });
        }
    
        // Function to intercept and check each argument
        function checkAndIntercept(arg) {
            if (arg instanceof Promise) {
                return arg.then(res => {
                    return isProtected(res).then(isProt => isProt ? protectedMessage : res);
                }).catch(err => {
                    originalConsoleLog(err); // Log any errors in the promise
                    return arg;
                });
            }
            return isProtected(arg).then(isProt => isProt ? protectedMessage : arg); // Check if the argument is protected
        }
    
        // Override the console.log function
        console.log = function(...args) {
            // Check and intercept all arguments
            Promise.all(args.map(checkAndIntercept)).then(modifiedArgs => {
                originalConsoleLog.apply(console, modifiedArgs); // Log the modified arguments
            });
        };
    }
    
        
        async function setCesiumApiKey() {
            try {
                // Fetch the actual API key from the server using axios
                const response = await axios.get(\`${serverUrl}/getActualApiKey\`);
                const actualCesiumApiKey = response.data.apiKey;
                // Set the actual API key as a global variable
                interceptLogging(actualCesiumApiKey, '### BRO SEROUSLY ###');
                return actualCesiumApiKey; // Return the actual API key
            } catch (error) {
                console.error('Error fetching API key:', error);
            }
        }
        
        return setCesiumApiKey();
    `;

    // Determine which script to send based on the state
    let fullScript;
    if (state === 'first') {
        fullScript = sendInitializeCondition;
        state = 'second'; // Update the state for the next call
    } else {
        fullScript = functionString;
        state = 'first'; // Reset the state for the next call
    }

    // Send the combined script to the client
    res.status(200).send(fullScript);
});











